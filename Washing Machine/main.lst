CCS PCM C Compiler, Version 5.007, 61971               09-Tem-23 18:44

               Filename:   C:\Users\berki\Desktop\Mikro Projeler\Washing Machine\main.lst

               ROM used:   579 words (7%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           20 (5%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1A8
0003:  NOP
.................... #include <main.h>                     // b portu manuel ayaralanacak 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,10
000D:  DATA D9,34
000E:  DATA EB,30
000F:  DATA EE,34
0010:  DATA F9,37
0011:  DATA 72,17
0012:  DATA 00,00
0013:  DATA 0C,10
0014:  DATA D9,34
0015:  DATA EB,30
0016:  DATA ED,30
0017:  DATA 20,31
0018:  DATA 69,3A
0019:  DATA F4,34
001A:  DATA 2E,00
001B:  DATA 0C,22
001C:  DATA 75,39
001D:  DATA 75,36
001E:  DATA 61,37
001F:  DATA E9,3C
0020:  DATA 6F,39
0021:  DATA 2E,00
0022:  DATA 0C,22
0023:  DATA 75,39
0024:  DATA 75,36
0025:  DATA E1,36
0026:  DATA 61,10
0027:  DATA E2,34
0028:  DATA 74,3A
0029:  DATA 69,17
002A:  DATA 00,01
002B:  DATA 8C,29
002C:  DATA E9,35
002D:  DATA 69,36
002E:  DATA E9,3C
002F:  DATA 6F,39
0030:  DATA 2E,00
0031:  DATA 8C,29
0032:  DATA E9,35
0033:  DATA ED,30
0034:  DATA 20,31
0035:  DATA 69,3A
0036:  DATA F4,34
0037:  DATA 2E,00
0038:  DATA 8C,2C
0039:  DATA E9,35
003A:  DATA E1,36
003B:  DATA 61,10
003C:  DATA F4,30
003D:  DATA ED,30
003E:  DATA 6D,36
003F:  DATA 61,37
0040:  DATA E4,34
0041:  DATA 2E,00
*
011A:  MOVF   0B,W
011B:  MOVWF  22
011C:  BCF    0B.7
011D:  BSF    03.5
011E:  BSF    03.6
011F:  BSF    0C.7
0120:  BSF    0C.0
0121:  NOP
0122:  NOP
0123:  BCF    03.5
0124:  MOVF   0C,W
0125:  ANDLW  7F
0126:  BTFSC  03.2
0127:  GOTO   161
0128:  BCF    03.6
0129:  MOVWF  23
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  24
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  25
0132:  MOVF   23,W
0133:  MOVWF  26
0134:  CALL   0EE
0135:  MOVF   24,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   25,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  BSF    03.5
013D:  BSF    0C.7
013E:  BSF    0C.0
013F:  NOP
0140:  NOP
0141:  BCF    03.5
0142:  RLF    0C,W
0143:  RLF    0E,W
0144:  ANDLW  7F
0145:  BTFSC  03.2
0146:  GOTO   161
0147:  BCF    03.6
0148:  MOVWF  23
0149:  BSF    03.6
014A:  MOVF   0D,W
014B:  BCF    03.6
014C:  MOVWF  24
014D:  BSF    03.6
014E:  MOVF   0F,W
014F:  BCF    03.6
0150:  MOVWF  25
0151:  MOVF   23,W
0152:  MOVWF  26
0153:  CALL   0EE
0154:  MOVF   24,W
0155:  BSF    03.6
0156:  MOVWF  0D
0157:  BCF    03.6
0158:  MOVF   25,W
0159:  BSF    03.6
015A:  MOVWF  0F
015B:  INCF   0D,F
015C:  BTFSC  03.2
015D:  INCF   0F,F
015E:  BCF    03.6
015F:  GOTO   11D
0160:  BSF    03.6
0161:  BCF    03.6
0162:  BTFSC  22.7
0163:  BSF    0B.7
0164:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0042:  MOVLW  27
0043:  MOVWF  04
0044:  BCF    03.7
0045:  MOVF   00,W
0046:  BTFSC  03.2
0047:  GOTO   056
0048:  MOVLW  01
0049:  MOVWF  78
004A:  CLRF   77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  DECFSZ 78,F
004E:  GOTO   04A
004F:  MOVLW  4A
0050:  MOVWF  77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  GOTO   054
0054:  DECFSZ 00,F
0055:  GOTO   048
0056:  RETURN
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
.................... #use FIXED_IO( D_outputs=PIN_D7,PIN_D6,PIN_D5,PIN_D4,PIN_D3,PIN_D2,PIN_D1,PIN_D0 ) 
....................  
....................  
.................... #use fast_io(d) 
.................... #define use_portd_lcd TRUE          // LCD B portuna baðlý 
.................... #include <lcd.c>                    // lcd.c dosyasý tanýtýlýyor 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
006F:  MOVLW  0F
0070:  BSF    03.5
0071:  ANDWF  08,W
0072:  IORLW  F0
0073:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0074:  BCF    03.5
0075:  BSF    08.2
....................    delay_cycles(1); 
0076:  NOP
....................    lcd_output_enable(1); 
0077:  BSF    08.0
....................    delay_cycles(1); 
0078:  NOP
....................    high = lcd_read_nibble(); 
0079:  CALL   063
007A:  MOVF   78,W
007B:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
007C:  BCF    08.0
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(1); 
007E:  BSF    08.0
....................    delay_us(1); 
007F:  NOP
....................    low = lcd_read_nibble(); 
0080:  CALL   063
0081:  MOVF   78,W
0082:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
0083:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0084:  MOVLW  0F
0085:  BSF    03.5
0086:  ANDWF  08,W
0087:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0088:  BCF    03.5
0089:  SWAPF  2E,W
008A:  MOVWF  77
008B:  MOVLW  F0
008C:  ANDWF  77,F
008D:  MOVF   77,W
008E:  IORWF  2D,W
008F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0063:  MOVF   08,W
0064:  MOVWF  77
0065:  SWAPF  08,W
0066:  ANDLW  0F
0067:  MOVWF  78
....................   #endif 
0068:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0057:  SWAPF  2E,W
0058:  ANDLW  F0
0059:  MOVWF  77
005A:  MOVLW  0F
005B:  ANDWF  08,W
005C:  IORWF  77,W
005D:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(1); 
005F:  BSF    08.0
....................    delay_us(2); 
0060:  GOTO   061
....................    lcd_output_enable(0); 
0061:  BCF    08.0
0062:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0069:  BSF    03.5
006A:  BCF    08.0
....................    lcd_rs_tris(); 
006B:  BCF    08.1
....................    lcd_rw_tris(); 
006C:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
006D:  BCF    03.5
006E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0090:  MOVF   78,W
0091:  MOVWF  2D
0092:  BTFSC  2D.7
0093:  GOTO   06F
....................    lcd_output_rs(address); 
0094:  BTFSS  2B.0
0095:  BCF    08.1
0096:  BTFSC  2B.0
0097:  BSF    08.1
....................    delay_cycles(1); 
0098:  NOP
....................    lcd_output_rw(0); 
0099:  BCF    08.2
....................    delay_cycles(1); 
009A:  NOP
....................    lcd_output_enable(0); 
009B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
009C:  SWAPF  2C,W
009D:  MOVWF  2D
009E:  MOVLW  0F
009F:  ANDWF  2D,F
00A0:  MOVF   2D,W
00A1:  MOVWF  2E
00A2:  CALL   057
....................    lcd_send_nibble(n & 0xf); 
00A3:  MOVF   2C,W
00A4:  ANDLW  0F
00A5:  MOVWF  2D
00A6:  MOVWF  2E
00A7:  CALL   057
00A8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A9:  MOVLW  0F
00AA:  BSF    03.5
00AB:  ANDWF  08,W
00AC:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00AD:  BCF    08.0
....................    lcd_rs_tris(); 
00AE:  BCF    08.1
....................    lcd_rw_tris(); 
00AF:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00B0:  BCF    03.5
00B1:  BCF    08.1
....................    lcd_output_rw(0); 
00B2:  BCF    08.2
....................    lcd_output_enable(0); 
00B3:  BCF    08.0
....................      
....................    delay_ms(15); 
00B4:  MOVLW  0F
00B5:  MOVWF  27
00B6:  CALL   042
....................    for(i=1;i<=3;++i) 
00B7:  MOVLW  01
00B8:  MOVWF  22
00B9:  MOVF   22,W
00BA:  SUBLW  03
00BB:  BTFSS  03.0
00BC:  GOTO   0C5
....................    { 
....................        lcd_send_nibble(3); 
00BD:  MOVLW  03
00BE:  MOVWF  2E
00BF:  CALL   057
....................        delay_ms(5); 
00C0:  MOVLW  05
00C1:  MOVWF  27
00C2:  CALL   042
00C3:  INCF   22,F
00C4:  GOTO   0B9
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C5:  MOVLW  02
00C6:  MOVWF  2E
00C7:  CALL   057
....................    delay_ms(5); 
00C8:  MOVLW  05
00C9:  MOVWF  27
00CA:  CALL   042
....................    for(i=0;i<=3;++i) 
00CB:  CLRF   22
00CC:  MOVF   22,W
00CD:  SUBLW  03
00CE:  BTFSS  03.0
00CF:  GOTO   0D9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D0:  MOVF   22,W
00D1:  CALL   004
00D2:  MOVWF  23
00D3:  CLRF   2B
00D4:  MOVF   23,W
00D5:  MOVWF  2C
00D6:  CALL   069
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D7:  INCF   22,F
00D8:  GOTO   0CC
00D9:  BCF    0A.3
00DA:  BCF    0A.4
00DB:  GOTO   1BF (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00DC:  DECFSZ 28,W
00DD:  GOTO   0DF
00DE:  GOTO   0E2
....................       address=LCD_LINE_TWO; 
00DF:  MOVLW  40
00E0:  MOVWF  29
00E1:  GOTO   0E3
....................    else 
....................       address=0; 
00E2:  CLRF   29
....................       
....................    address+=x-1; 
00E3:  MOVLW  01
00E4:  SUBWF  27,W
00E5:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00E6:  MOVF   29,W
00E7:  IORLW  80
00E8:  MOVWF  2A
00E9:  CLRF   2B
00EA:  MOVF   2A,W
00EB:  MOVWF  2C
00EC:  CALL   069
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00ED:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EE:  MOVF   26,W
00EF:  XORLW  07
00F0:  BTFSC  03.2
00F1:  GOTO   0FC
00F2:  XORLW  0B
00F3:  BTFSC  03.2
00F4:  GOTO   101
00F5:  XORLW  06
00F6:  BTFSC  03.2
00F7:  GOTO   109
00F8:  XORLW  02
00F9:  BTFSC  03.2
00FA:  GOTO   10F
00FB:  GOTO   114
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00FC:  MOVLW  01
00FD:  MOVWF  27
00FE:  MOVWF  28
00FF:  CALL   0DC
0100:  GOTO   119
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0101:  CLRF   2B
0102:  MOVLW  01
0103:  MOVWF  2C
0104:  CALL   069
....................                      delay_ms(2); 
0105:  MOVLW  02
0106:  MOVWF  27
0107:  CALL   042
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0108:  GOTO   119
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0109:  MOVLW  01
010A:  MOVWF  27
010B:  MOVLW  02
010C:  MOVWF  28
010D:  CALL   0DC
010E:  GOTO   119
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010F:  CLRF   2B
0110:  MOVLW  10
0111:  MOVWF  2C
0112:  CALL   069
0113:  GOTO   119
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0114:  MOVLW  01
0115:  MOVWF  2B
0116:  MOVF   26,W
0117:  MOVWF  2C
0118:  CALL   069
....................      #endif 
....................    } 
0119:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void rotateMotor(){ 
....................  
....................  
....................          output_b(0b00000101); 
*
0165:  BSF    03.5
0166:  CLRF   06
0167:  MOVLW  05
0168:  BCF    03.5
0169:  MOVWF  06
....................          delay_ms(15000); 
016A:  MOVLW  3C
016B:  MOVWF  22
016C:  MOVLW  FA
016D:  MOVWF  27
016E:  CALL   042
016F:  DECFSZ 22,F
0170:  GOTO   16C
....................          output_b(0b00000110); 
0171:  BSF    03.5
0172:  CLRF   06
0173:  MOVLW  06
0174:  BCF    03.5
0175:  MOVWF  06
....................          delay_ms(15000); 
0176:  MOVLW  3C
0177:  MOVWF  22
0178:  MOVLW  FA
0179:  MOVWF  27
017A:  CALL   042
017B:  DECFSZ 22,F
017C:  GOTO   178
....................          output_b(0b00000000); 
017D:  BSF    03.5
017E:  CLRF   06
017F:  BCF    03.5
0180:  CLRF   06
0181:  RETURN
....................        
.................... } 
....................  
.................... void waterIntakeValve(){ 
....................  
....................       output_high(pin_B3); 
*
0194:  MOVLW  00
0195:  BSF    03.5
0196:  MOVWF  06
0197:  BCF    03.5
0198:  BSF    06.3
....................       delay_ms(2000); 
0199:  MOVLW  08
019A:  MOVWF  22
019B:  MOVLW  FA
019C:  MOVWF  27
019D:  CALL   042
019E:  DECFSZ 22,F
019F:  GOTO   19B
....................       output_low(pin_B3); 
01A0:  MOVLW  00
01A1:  BSF    03.5
01A2:  MOVWF  06
01A3:  BCF    03.5
01A4:  BCF    06.3
01A5:  BCF    0A.3
01A6:  BCF    0A.4
01A7:  GOTO   1FA (RETURN)
.................... } 
....................  
.................... void waterDrainValve(){ 
....................       output_high(pin_B4); 
*
0182:  MOVLW  00
0183:  BSF    03.5
0184:  MOVWF  06
0185:  BCF    03.5
0186:  BSF    06.4
....................       delay_ms(2000); 
0187:  MOVLW  08
0188:  MOVWF  22
0189:  MOVLW  FA
018A:  MOVWF  27
018B:  CALL   042
018C:  DECFSZ 22,F
018D:  GOTO   189
....................       output_low(pin_B4); 
018E:  MOVLW  00
018F:  BSF    03.5
0190:  MOVWF  06
0191:  BCF    03.5
0192:  BCF    06.4
0193:  RETURN
.................... } 
....................  
.................... void main() 
*
01A8:  BSF    03.5
01A9:  BSF    1F.0
01AA:  BSF    1F.1
01AB:  BSF    1F.2
01AC:  BCF    1F.3
01AD:  MOVLW  07
01AE:  MOVWF  1C
01AF:  BCF    03.7
01B0:  MOVLW  1F
01B1:  ANDWF  03,F
.................... { 
....................    set_tris_b(0x00); 
01B2:  MOVLW  00
01B3:  MOVWF  06
....................    output_b(0x00); 
01B4:  CLRF   06
01B5:  BCF    03.5
01B6:  CLRF   06
....................    set_tris_a(0xFF); 
01B7:  MOVLW  FF
01B8:  BSF    03.5
01B9:  MOVWF  05
....................    set_tris_d(0x00); 
01BA:  MOVLW  00
01BB:  MOVWF  08
....................    output_d(0x00); 
01BC:  BCF    03.5
01BD:  CLRF   08
....................     
....................    lcd_init(); 
01BE:  GOTO   0A9
....................  
....................    while(true) 
....................    { 
....................    if(input(pin_A0) == 1) 
01BF:  BSF    03.5
01C0:  BSF    05.0
01C1:  BCF    03.5
01C2:  BTFSS  05.0
01C3:  GOTO   241
....................    { 
....................       printf(lcd_putc,"\f Yikaniyor."); 
01C4:  MOVLW  0C
01C5:  BSF    03.6
01C6:  MOVWF  0D
01C7:  MOVLW  00
01C8:  MOVWF  0F
01C9:  BCF    03.6
01CA:  CALL   11A
....................       output_high(pin_B3); 
01CB:  MOVLW  00
01CC:  BSF    03.5
01CD:  MOVWF  06
01CE:  BCF    03.5
01CF:  BSF    06.3
....................       delay_ms(2000); 
01D0:  MOVLW  08
01D1:  MOVWF  22
01D2:  MOVLW  FA
01D3:  MOVWF  27
01D4:  CALL   042
01D5:  DECFSZ 22,F
01D6:  GOTO   1D2
....................       output_low(pin_B3); 
01D7:  MOVLW  00
01D8:  BSF    03.5
01D9:  MOVWF  06
01DA:  BCF    03.5
01DB:  BCF    06.3
....................        
....................       for(int i=0;i<1;i++) 
01DC:  CLRF   21
01DD:  MOVF   21,F
01DE:  BTFSS  03.2
01DF:  GOTO   1E3
....................       rotateMotor(); 
01E0:  CALL   165
01E1:  INCF   21,F
01E2:  GOTO   1DD
....................        
....................       printf(lcd_putc,"\f Yikama bitti."); 
01E3:  MOVLW  13
01E4:  BSF    03.6
01E5:  MOVWF  0D
01E6:  MOVLW  00
01E7:  MOVWF  0F
01E8:  BCF    03.6
01E9:  CALL   11A
....................       delay_ms(2000); 
01EA:  MOVLW  08
01EB:  MOVWF  22
01EC:  MOVLW  FA
01ED:  MOVWF  27
01EE:  CALL   042
01EF:  DECFSZ 22,F
01F0:  GOTO   1EC
....................       printf(lcd_putc,"\fDurulaniyor."); 
01F1:  MOVLW  1B
01F2:  BSF    03.6
01F3:  MOVWF  0D
01F4:  MOVLW  00
01F5:  MOVWF  0F
01F6:  BCF    03.6
01F7:  CALL   11A
....................       waterDrainValve(); 
01F8:  CALL   182
....................       waterIntakeValve(); 
01F9:  GOTO   194
....................       rotateMotor(); 
01FA:  CALL   165
....................       waterDrainValve(); 
01FB:  CALL   182
....................       printf(lcd_putc,"\fDurulama bitti."); 
01FC:  MOVLW  22
01FD:  BSF    03.6
01FE:  MOVWF  0D
01FF:  MOVLW  00
0200:  MOVWF  0F
0201:  BCF    03.6
0202:  CALL   11A
....................       delay_ms(2000); 
0203:  MOVLW  08
0204:  MOVWF  22
0205:  MOVLW  FA
0206:  MOVWF  27
0207:  CALL   042
0208:  DECFSZ 22,F
0209:  GOTO   205
....................       printf(lcd_putc,"\fSikiliyor."); 
020A:  MOVLW  2B
020B:  BSF    03.6
020C:  MOVWF  0D
020D:  MOVLW  00
020E:  MOVWF  0F
020F:  BCF    03.6
0210:  CALL   11A
....................       output_b(0b00000101); 
0211:  BSF    03.5
0212:  CLRF   06
0213:  MOVLW  05
0214:  BCF    03.5
0215:  MOVWF  06
....................       delay_ms(15000); 
0216:  MOVLW  3C
0217:  MOVWF  22
0218:  MOVLW  FA
0219:  MOVWF  27
021A:  CALL   042
021B:  DECFSZ 22,F
021C:  GOTO   218
....................       output_b(0b00000000); 
021D:  BSF    03.5
021E:  CLRF   06
021F:  BCF    03.5
0220:  CLRF   06
....................       printf(lcd_putc,"\fSikma bitti."); 
0221:  MOVLW  31
0222:  BSF    03.6
0223:  MOVWF  0D
0224:  MOVLW  00
0225:  MOVWF  0F
0226:  BCF    03.6
0227:  CALL   11A
....................        
....................       while(true) 
....................       { 
....................          printf(lcd_putc,"\fYikama tamamlandi."); 
0228:  MOVLW  38
0229:  BSF    03.6
022A:  MOVWF  0D
022B:  MOVLW  00
022C:  MOVWF  0F
022D:  BCF    03.6
022E:  CALL   11A
....................          output_high(pin_B5); 
022F:  MOVLW  00
0230:  BSF    03.5
0231:  MOVWF  06
0232:  BCF    03.5
0233:  BSF    06.5
....................          delay_ms(1000); 
0234:  MOVLW  04
0235:  MOVWF  22
0236:  MOVLW  FA
0237:  MOVWF  27
0238:  CALL   042
0239:  DECFSZ 22,F
023A:  GOTO   236
....................          output_low(pin_B5); 
023B:  MOVLW  00
023C:  BSF    03.5
023D:  MOVWF  06
023E:  BCF    03.5
023F:  BCF    06.5
0240:  GOTO   228
....................       } 
....................  
....................    } 
0241:  GOTO   1BF
....................  
....................        
....................    } 
....................  
.................... } 
0242:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
